Java is statically typed langauge. Means type of variable is known at compile time.

Prmitive Types:
1.Boolean : 1 bit : 0/1
2.Byte : 1 byte(8 bits) : -128 to 127
    byte a = 127;
    a++;
    Ans. will be -128 as its an overflow.
3.Int : 32 bits
4.Float : 32 bits
5.Long : 64 bits
6.Double : 64 bits
7.char : 16 bits 

Enum:
    enum Color 
    { 
        RED, GREEN, BLUE; 
    } 
    
    public class Test 
    { 
        // Driver method 
        public static void main(String[] args) 
        { 
            Color c1 = Color.RED; 
            System.out.println(c1); 
        } 
    }

    /* internally above enum Color is converted to
    class Color
    {
        public static final Color RED = new Color();
        public static final Color BLUE = new Color();
        public static final Color GREEN = new Color();
    }*/

Modifier      Package  Subclass  World

public          Yes      Yes     Yes

protected       Yes      Yes     No

Default (no
modifier)       Yes       No     No

private         No        No     No


final as Immutable
    If we have more than one constructors or overloaded constructor in class, then blank final variable must be initialized in all of them. However constructor chaining can be used to initialize the blank final variable.

Widening or Automatic Conversion:
    Byte -> Short -> Int -> Long -> Float -> Double

We can static method with null reference but cant call non-static methods with null reference as object is not defined(having null reference)

Exceptions:
    Hierarchy:
        Throwable
            Exceptions 
                Checked Exception : IO and Compile time
                UnChecked Exception : NUll pointer Exception and Runtime Exception
            Error
                Virtual Machine Error
                Assertion Error

3 ways to print exception message:
    1.e.printStackTrace()
    2.e.toString()
    3.e.getMessage()

For Interfaces, methods are always public and variables are always public static final.

Java prohrams cant have non-public member interface.

Nested Classes:
    
    Static Nested Classes
    
    Inner Classes(Non-static nested classes)
        Local Classes
        Anonymous Classes

Enumerations:
    1.Enumeration is for legacy classes(Vector, Hashtable) only. Hence it is not a universal iterator.
    2.Remove operations can’t be performed using Enumeration.
    3.Only forward direction iterating is possible.

In for-each loop, we can’t modify collection, it will throw a ConcurrentModificationException on the other hand with iterator we can modify collection.

Methods to prevent Thread Excecution:
    1.yield() basically means that the thread is not doing anything particularly important and if any other threads or processes need to be run, they should run. Otherwise, the current thread will continue to run.
    2.sleep(): This method causes the currently executing thread to sleep for the specified     number of milliseconds, subject to the precision and accuracy of system timers and schedulers.
    3.If join() is called on a Thread instance, the currently running thread will block until the Thread instance has finished executing.If any executing thread t1 calls join() on t2 
    i.e; t2.join() immediately t1 will enter into waiting state until t2 completes its execution.Giving a timeout within join(), will make the join() effect to be nullified after the specific timeout.
    4.wait()-It tells the calling thread to give up the lock and go to sleep until some other thread enters the same monitor and calls notify().
    5.notify()-It wakes up one single thread that called wait() on the same object. It should be noted that calling notify() does not actually give up a lock on a resource.
    6.notifyAll()-It wakes up all the threads that called wait() on the same object.

The purpose of start() is to create a separate call stack for the thread. A separate call stack is created by it, and then run() is called by JVM.

Synchronization is implemented in Java with a concept called monitors. Only one thread can own a monitor at a given time. When a thread acquires a lock, it is said to have entered the monitor. All other threads attempting to enter the locked monitor will be suspended until the first thread exits the monitor.

Semaphore:
    In general, to use a semaphore, the thread that wants access to the shared resource tries to acquire a permit.

    1.If the semaphore’s count is greater than zero, then the thread acquires a permit, which causes the semaphore’s count to be decremented.
    2.Otherwise, the thread will be blocked until a permit can be acquired.
    3.When the thread no longer needs an access to the shared resource, it releases the permit, which causes the semaphore’s count to be incremented.
    4.If there is another thread waiting for a permit, then that thread will acquire a permit at that time.

CountDownLatch:
    CountDownLatch is used to make sure that a task waits for other threads before it starts. To understand its application, let us consider a server where the main task can only start when all the required services have started.

    Working of CountDownLatch:
        When we create an object of CountDownLatch, we specify the number of threads it should wait for, all such thread are required to do count down by calling CountDownLatch.countDown() once they are completed or ready to the job. As soon as count reaches zero, the waiting task starts running.

Reentrant Lock:
    The traditional way to achieve thread synchronization in Java is by the use of synchronized keyword. While it provides a certain basic synchronization, the synchronized keyword is quite rigid in its use. For example, a thread can take a lock only once. Synchronized blocks don’t offer any mechanism of a waiting queue and after the exit of one thread, any thread can take the lock. This could lead to starvation of resources for some other thread for a very long period of time.

    Reentrant Locks are provided in Java to provide synchronization with greater flexibility.

Cyclic Barrier:
    CyclicBarrier is used to make threads wait for each other. It is used when different threads process a part of computation and when all threads have completed the execution, the result needs to be combined in the parent thread. In other words, a CyclicBarrier is used when multiple thread carry out different sub tasks and the output of these sub tasks need to be combined to form the final output. After completing its execution, threads call await() method and wait for other threads to reach the barrier. Once all the threads have reached, the barriers then give the way for threads to proceed.

Callable vs Future:
    There are two ways of creating threads – one by extending the Thread class and other by creating a thread with a Runnable. However, one feature lacking in  Runnable is that we cannot make a thread return result when it terminates, i.e. when run() completes. For supporting this feature, the Callable interface is present in Java.

Garbage Collection Algorithm:
    Mark - Sweep:
        
